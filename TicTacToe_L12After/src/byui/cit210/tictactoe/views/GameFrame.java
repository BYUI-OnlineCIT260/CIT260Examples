/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package byui.cit210.tictactoe.views;

import byui.cit210.tictactoe.controls.GameMenuControl;
import byui.cit210.tictactoe.controls.TicTacToe;
import byui.cit210.tictactoe.enums.GameType;
import byui.cit210.tictactoe.enums.PlayerType;
import byui.cit210.tictactoe.enums.StatusType;
import byui.cit210.tictactoe.exceptions.GameException;
import byui.cit210.tictactoe.exceptions.TicTacToeException;
import byui.cit210.tictactoe.models.Game;
import byui.cit210.tictactoe.models.Player;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.Point;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;

/**
 *
 * @author jacksonrkj
 */
public class GameFrame extends javax.swing.JFrame {

    private String currentMarker = null;
    private Game game = null;
    private GameMenuControl gameCommands = null;

    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
        this.initComponents();
        this.initializeFrame();
        setLocationRelativeTo(null);
    }

    public GameFrame(Game game) {
        this();
        this.game = game;
        this.gameCommands = new GameMenuControl(game);
    }

    public void initializeFrame() {
        /* Create and display the form */
        

        ticTacToeTable.getTableHeader().setVisible(false);
        ticTacToeTable.getTableHeader().setPreferredSize(new Dimension(0, 0));
        ticTacToeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        Color backgroundColor = ticTacToeTable.getBackground();
        ticTacToeTable.setSelectionBackground(backgroundColor);

        CellRenderer cellRenderer = new CellRenderer();
        cellRenderer.setHorizontalAlignment(JLabel.CENTER);
        TableColumnModel columnTableModel = ticTacToeTable.getColumnModel();
        for (int i = 0; i < ticTacToeTable.getColumnCount(); i++) {
            columnTableModel.getColumn(i).setCellRenderer(cellRenderer);
        }
        
    }

    public String getCurrentMarker() {
        return currentMarker;
    }

    public void setCurrentMarker(String currentMarker) {
        this.currentMarker = currentMarker;
    }

    public Game getGame() {
        return game;
    }

    public void setGame(Game game) {
        this.game = game;
    }

    public JTable getTicTacToeTable() {
        return ticTacToeTable;
    }

    public void setTicTacToeTable(JTable ticTacToeTable) {
        this.ticTacToeTable = ticTacToeTable;
    }

    public JPanel getJpMainPanel() {
        return jpMainPanel;
    }

    public void setJpMainPanel(JPanel jpMainPanel) {
        this.jpMainPanel = jpMainPanel;
    }

    public JPanel getJpBody() {
        return jpBody;
    }

    public void setJpBody(JPanel jpBody) {
        this.jpBody = jpBody;
    }

    
    
    
    public void displayStatistics() {
        this.jtMessageArea.setForeground(Color.blue);
        String playerAStatistics = this.game.getPlayerA().getPlayerStastics();
        String playerBStatistics = this.game.getPlayerB().getPlayerStastics();
        this.jtMessageArea.setText(playerAStatistics + "\n\n" + playerBStatistics);
        this.jtMessageArea.setForeground(Color.black);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpBody = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jbPreferences = new javax.swing.JButton();
        jbNewGame = new javax.swing.JButton();
        jbStastics = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jbQuit = new javax.swing.JButton();
        jpMainPanel = new javax.swing.JPanel();
        ticTacToeTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtMessageArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jpBody.setBackground(new java.awt.Color(204, 255, 204));
        jpBody.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));

        jbPreferences.setText("Preferences");
        jbPreferences.setSize(new java.awt.Dimension(100, 29));
        jbPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPreferencesActionPerformed(evt);
            }
        });

        jbNewGame.setText("New Game");
        jbNewGame.setSize(new java.awt.Dimension(100, 29));
        jbNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNewGameActionPerformed(evt);
            }
        });

        jbStastics.setText("Stastictics");
        jbStastics.setSize(new java.awt.Dimension(150, 29));
        jbStastics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbStasticsActionPerformed(evt);
            }
        });

        jButton1.setText("Help");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jbQuit.setText("Quit");
        jbQuit.setSize(new java.awt.Dimension(100, 29));
        jbQuit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jbQuitMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jButton1))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jbNewGame, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jbStastics, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jbPreferences, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(jbQuit, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 91, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(new java.awt.Component[] {jButton1, jbNewGame, jbPreferences, jbStastics}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jbNewGame)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jbPreferences)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jbStastics)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1)
                .add(18, 18, 18)
                .add(jbQuit)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jpMainPanel.setBackground(new java.awt.Color(204, 255, 204));

        ticTacToeTable.setBackground(new java.awt.Color(255, 255, 204));
        ticTacToeTable.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(0, 0, 0)));
        ticTacToeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ));
        ticTacToeTable.setAutoscrolls(false);
        ticTacToeTable.setFocusable(false);
        ticTacToeTable.setGridColor(new java.awt.Color(0, 0, 0));
        ticTacToeTable.setRowHeight(60);
        ticTacToeTable.setShowGrid(true);
        ticTacToeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cellClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jpMainPanelLayout = new org.jdesktop.layout.GroupLayout(jpMainPanel);
        jpMainPanel.setLayout(jpMainPanelLayout);
        jpMainPanelLayout.setHorizontalGroup(
            jpMainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jpMainPanelLayout.createSequentialGroup()
                .addContainerGap(62, Short.MAX_VALUE)
                .add(ticTacToeTable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(27, 27, 27))
        );
        jpMainPanelLayout.setVerticalGroup(
            jpMainPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(ticTacToeTable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        ticTacToeTable.getColumnModel().getColumn(0).setResizable(false);
        ticTacToeTable.getColumnModel().getColumn(0).setHeaderValue("Title 1");
        ticTacToeTable.getColumnModel().getColumn(1).setResizable(false);
        ticTacToeTable.getColumnModel().getColumn(1).setHeaderValue("Title 2");
        ticTacToeTable.getColumnModel().getColumn(2).setResizable(false);
        ticTacToeTable.getColumnModel().getColumn(2).setHeaderValue("Title 3");

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Tic-Tac-Toe Game");
        jLabel4.setFocusable(false);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jtMessageArea.setEditable(false);
        jtMessageArea.setColumns(20);
        jtMessageArea.setLineWrap(true);
        jtMessageArea.setRows(4);
        jtMessageArea.setWrapStyleWord(true);
        jtMessageArea.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(), javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5)));
        jtMessageArea.setDragEnabled(false);
        jtMessageArea.setFocusTraversalKeysEnabled(false);
        jtMessageArea.setFocusable(false);
        jtMessageArea.setMargin(new java.awt.Insets(5, 5, 5, 5));
        jtMessageArea.setRequestFocusEnabled(false);
        jScrollPane2.setViewportView(jtMessageArea);

        org.jdesktop.layout.GroupLayout jpBodyLayout = new org.jdesktop.layout.GroupLayout(jpBody);
        jpBody.setLayout(jpBodyLayout);
        jpBodyLayout.setHorizontalGroup(
            jpBodyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpBodyLayout.createSequentialGroup()
                .add(jpBodyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jpBodyLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jpBodyLayout.createSequentialGroup()
                        .add(jpBodyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jpBodyLayout.createSequentialGroup()
                                .add(18, 18, 18)
                                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 445, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jpBodyLayout.createSequentialGroup()
                                .add(jpMainPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 13, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpBodyLayout.setVerticalGroup(
            jpBodyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jpBodyLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jpBodyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jpMainPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jpBody, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jpBody, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbStasticsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbStasticsActionPerformed
        this.displayStatistics();
    }//GEN-LAST:event_jbStasticsActionPerformed

    private void jbNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNewGameActionPerformed
        this.gameCommands.startNewGame(this.game);
        clearMarkers();
        takeFirstTurn();
        String nextPlayersMessage = this.game.getCurrentPlayer().getName()
        + " it is your turn.";
        this.jtMessageArea.setText(nextPlayersMessage);
    }//GEN-LAST:event_jbNewGameActionPerformed

    private void jbQuitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jbQuitMouseClicked
        TicTacToe.mainFrame.setVisible(true);
        this.dispose();

        //        this.setVisible(false);
    }//GEN-LAST:event_jbQuitMouseClicked

    private void cellClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cellClicked
        JTable jTable = (JTable) evt.getComponent();
        this.jtMessageArea.setForeground(Color.black);
        this.takeTurn(jTable);
    }//GEN-LAST:event_cellClicked

    private void jbPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPreferencesActionPerformed
        GamePreferencesFrame gamePreferencesFrame = new GamePreferencesFrame(this.game, this);
        gamePreferencesFrame.setVisible(true);
    }//GEN-LAST:event_jbPreferencesActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        HelpFrame helpFrame = new HelpFrame();
        helpFrame.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void clearMarkers() {
        TableModel model = this.ticTacToeTable.getModel();
        int rowCount = this.ticTacToeTable.getRowCount();
        int colCount = this.ticTacToeTable.getColumnCount();
        for (int row = 0; row < rowCount; row++) {
            for (int col = 0; col < colCount; col++) {
                model.setValueAt("", row, col);
            }
        }   
    }
    
    
    private String getNextPlayerMessage(Player player) {
        if (this.game.getGameType() == GameType.ONE_PLAYER) {
            return "The computer took it's turn. It is now your turn "
                    + player.getName();
        } else {
            return "It is now your turn "
                    + player.getName();
        }
    }

    
    
    
    private boolean gameOver() {
        if (this.game.getStatus() == StatusType.TIE) { // a tie?
            this.jtMessageArea.setText(this.game.getTiedMessage());
            return true;
        } else if (this.game.getStatus() == StatusType.WINNER) { // a win?
            this.jtMessageArea.setText(this.game.getWinningMessage());
            return true;
        }

        return false;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jbNewGame;
    private javax.swing.JButton jbPreferences;
    private javax.swing.JButton jbQuit;
    private javax.swing.JButton jbStastics;
    private javax.swing.JPanel jpBody;
    private javax.swing.JPanel jpMainPanel;
    private javax.swing.JTextArea jtMessageArea;
    private javax.swing.JTable ticTacToeTable;
    // End of variables declaration//GEN-END:variables

    private void takeFirstTurn() {
        Player currentPlayer = this.game.getCurrentPlayer();
        
        if (this.game.getStatus() == StatusType.NEW_GAME
                && this.game.getGameType() == GameType.ONE_PLAYER
                && currentPlayer.getPlayerType() == PlayerType.COMPUTER_PLAYER) {
            try {
                Point locationMarkerPlaced = this.gameCommands.playerTakesTurn(currentPlayer, null);

                String playersMarker = game.getCurrentPlayer().getMarker();
                this.ticTacToeTable.getModel().setValueAt(playersMarker, locationMarkerPlaced.x, locationMarkerPlaced.y);
                
            } catch (Exception ex) {
                this.jtMessageArea.setText(ex.getMessage());
                ex.printStackTrace();
                this.dispose();
            }
        }
        
        String promptNextPlayer = getNextPlayerMessage(currentPlayer);
        this.jtMessageArea.setText(promptNextPlayer);
        this.game.setStatus(StatusType.PLAYING);
    }

    private void takeTurn(JTable table) {
        String playersMarker;
        int selectedRow = table.getSelectedRow();
        int selectedColumn = table.getSelectedColumn();
        Point selectedLocation = new Point(selectedRow, selectedColumn);

        Player currentPlayer = this.game.getCurrentPlayer();
        Player otherPlayer = this.game.getOtherPlayer();

        try {

            if (this.game.getGameType() == GameType.ONE_PLAYER) {
                // regular players turn
                Point locationMarkerPlaced = 
                        this.gameCommands.playerTakesTurn(currentPlayer, selectedLocation);
                playersMarker = currentPlayer.getMarker();
                table.getModel().setValueAt(playersMarker, locationMarkerPlaced.x, locationMarkerPlaced.y);
                if (this.gameOver()) { // game won or tied?
                    return;
                }
              
                table.setCellSelectionEnabled(false);
                ListSelectionModel selectionModel = table.getSelectionModel();
                selectionModel.clearSelection();
                

                // computers turn
                locationMarkerPlaced = this.gameCommands.playerTakesTurn(otherPlayer, null);
                playersMarker = otherPlayer.getMarker();
                table.getModel().setValueAt(playersMarker, locationMarkerPlaced.x, locationMarkerPlaced.y);

                if (this.gameOver()) { // game won or tied?
                    return;
                }
                
                


            } else { // two player game
                // regular players turn                
                Point locationMarkerPlaced = this.gameCommands.playerTakesTurn(this.game.getCurrentPlayer(), selectedLocation);
                playersMarker = currentPlayer.getMarker();
                table.getModel().setValueAt(playersMarker, locationMarkerPlaced.x, selectedColumn);
                if (this.gameOver()) { // game won or tied?
                    return;
                }
                
                table.setCellSelectionEnabled(false);
                ListSelectionModel selectionModel = table.getSelectionModel();
                selectionModel.clearSelection();
            }

            if (this.gameOver()) { // game won or tied?
                return;
            }

            String promptNextPlayer = getNextPlayerMessage(this.game.getCurrentPlayer());
            this.jtMessageArea.setText(promptNextPlayer);

        } catch (GameException | TicTacToeException gex) {
            this.jtMessageArea.setText(gex.getMessage());
            ListSelectionModel selectionModel = table.getSelectionModel();
            selectionModel.clearSelection();
        } catch (Exception ex) {
            this.jtMessageArea.setText(ex.getMessage());
            ex.printStackTrace();
            this.dispose();
        }
    }

    private class CellRenderer extends DefaultTableCellRenderer {

        public CellRenderer() {
            super();
        }

        public void setValue(Player player) {
            setText((player == null) ? "" : player.getMarker());
        }
    }
}
